{"version":3,"sources":["Card.js","Cardlist.js","SB.js","scrol.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","serachChange","type","placeholder","onChange","Scrol","style","overflow","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","searchRobo","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8MAeeA,EAbF,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACC,yBAAKC,UAAY,mDACjB,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAA1B,cAClB,6BACC,4BAAKF,GACL,2BAAIC,MCYOK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAOC,GACnB,OACC,kBAAC,EAAD,CACCC,IAAOD,EACPR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCGRW,EAdG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKV,UAAU,OACd,2BACAA,UAAW,mCACXW,KAAK,SACLC,YAAa,sBACbC,SAAUH,MCEEI,EATD,SAAClB,GACd,OACC,yBAAKmB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAS,UACpEtB,EAAMuB,WCoCKC,G,wDAnCd,aAAc,IAAD,8BACZ,gBAYFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAZxC,EAAKC,MAAO,CACXvB,OAAQ,GACRoB,YAAa,IAJF,E,gEAOM,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvB,GAAI,OAAI,EAAKiB,SAAS,CAACnB,OAAQE,S,+BAS5B,IAAD,OACD0B,EAAaC,KAAKN,MAAMvB,OAAO8B,QAAO,SAAA9B,GAC5C,OAAOA,EAAOP,KAAKsC,cAAcC,SAAS,EAAKT,MAAMH,YAAYW,kBAEjE,OACA,yBAAKnC,UAAU,OACd,2CACA,kBAAC,EAAD,CAAWU,aAAgBuB,KAAKZ,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjB,OAAQ4B,U,GA7BJK,c,MCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1b32768e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst {name, email, id} = props;\r\n\treturn(\r\n\t\t<div className = 'bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='test' src={`https://robohash.org/${id}?100x100`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{ \r\n\t\t\t\trobots.map((user , i) =>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey = {i}\r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t})\r\n\t\t}\t\r\n    \t</div>\r\n\t);\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({serachChange}) =>{\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\tclassName ='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder= 'Search Robo_Friends'\r\n\t\t\tonChange={serachChange} \r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scrol = (props) =>{\r\n\treturn(\r\n\t\t<div style={{ overflow: 'scroll', border: '0px solid black', height : '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Scrol;","import React, { Component } from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport SearchBox from \"./SB\";\r\nimport Scrol from \"./scrol\"\r\nimport \"./App.css\"\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(user => this.setState({robots: user}))\r\n}\r\n\r\nonSearchChange = (event) =>{\r\n\tthis.setState({searchField: event.target.value})\r\n\t\r\n\t}\r\n\t\r\n\r\n\trender(){\r\n\t\tconst searchRobo = this.state.robots.filter(robots =>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n\t\t});\r\n\t\treturn(\r\n\t\t<div className=\"tc \">\r\n\t\t\t<h1>Robo_Friend</h1>\r\n\t\t\t<SearchBox serachChange = {this.onSearchChange}/>\r\n\t\t\t<Scrol>\r\n\t\t\t\t<Cardlist robots={searchRobo}/>\r\n\t\t\t</Scrol>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}